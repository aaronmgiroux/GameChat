/** * Global functions used by the GameChat client and server * to perform operations that require server data. * @namespace */GameChatServer = {};Meteor.startup(function() {    ChatRooms.allow({        'insert':function(userId, doc){            return true;        },        'update': function(userId, doc, fieldNames, modifier){            return true;            /* TODO Fix literally all of this            // TODO Evaluate all possible Mongo modifiers and determine appropriate permissions            // Allow users to modify chat rooms that they create            if (doc.ownerId == userId) {                return true;            }            // TODO Confirm that messaging is the only allowed update for other users            // Allow all permitted users to send messages            if (fieldNames === ['messages']) {                // If room is public then return true                if (doc.isPublic === 0) {                    return true;                }                // If user is permitted to join then return true                if (ChatRoomsAccessLevels                        .find({userId: userId, chatRoomId: doc._id, isBanned: false})                        .count() === 1) {                    return true;                }            }            // If previous checks fail then user is not permitted, return false            return false;            */        },        'remove':function(userId,doc){            return false;        },        // TODO Prevent users from generating their own _id        //'transform': {$set: {ownerId: this.userId} }    });    ChatRoomsAccessLevels.allow({        'insert': function(userId, doc) {            // Do not allow users to create access levels for their own accounts            if (doc.userId === userId) {                return false;            }            var existingChatRoom = ChatRooms.findOne({_id: doc.chatRoomId});            // Do not allow users to create access levels for chat rooms that don't exist            // TODO Find out what collections.findOne actually returns if nothing is found            // I don't trust the docs right now            if (existingChatRoom === null                || existingChatRoom === undefined                || existingChatRoom === 0) {               return false;            }            // Only allow users to create access levels for chat rooms they've created            if (existingChatRoom.ownerId !== userId) {                return false;            }            // Do not allow users to create more than one access level per user per chat room            // TODO Find out what collections.findOne actually returns if nothing is found            // I don't trust the docs right now            var existingAccessLevel = ChatRoomsAccess.findOne({_id: doc.userId});            if (existingAccessLevel  !== null                || existingAccessLevel !== undefined                || existingAccessLevel !== 0) {                return false;            }            //            return false;        },        'update': function(userId, doc, fieldNames, modifier) {            // Do not allow users to modify access levels for their own accounts            if (doc.userId === userId) {                return false;            }            // Only allow users to modify access levels for chat rooms they've created            if (doc.ownerId === userId) {                return true;            }            // Default            return false;        },        'remove': function(userId, doc) {            // Do not allow users to remove access levels.            // They will be removed by the server upon deletion of the Chat Room.            return false;        },        // TODO Prevent users from generating their own _id        //'transform': {$set: {ownerId: this.userId}}    });    // TODO Prevent users from generating their own _id    ChatRoomsInvites.allow({        'insert': function(userId, doc) {        },        'update': function(userId, doc, fieldNames, modifier) {        },        'remove': function(userId, doc) {        },        // TODO Prevent users from generating their own _id        //'transform': {$set: {ownerId: this.userId} }    });});