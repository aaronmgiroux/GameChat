// TODO Delete this if I can't find a use for it/** * Global functions used by the GameChat client and server * to perform operations that require server data. * @namespace */GameChatServer = {};Meteor.startup(function() {    // TODO Create site admin that can ban users from public chat    // Create Home chat room (public)    if (!ChatRooms.findOne({roomname: 'Public Chat'}))    ChatRooms.insert({            adminId: null,            roomname: 'Public Chat',            isPublic: true,            accessRegular:[],            accessBanned:[],            messages:[]    });    ChatRooms.allow({        'insert':function(userId, doc){            return true;        },        'update': function(userId, doc, fieldNames, modifier){            // Allow users to modify chat rooms that they create            if (doc.adminId == userId) {                return true;            }            // TODO Confirm that messaging is the only allowed update for other users            // TODO Confirm that extra var if necessary, remove if it isn't            // Allow all permitted users to send messages            var fieldNamesToModify = fieldNames;            if (fieldNamesToModify.pop() === 'messages') {                // If the user wants to do something other than send messages, return false                if (fieldNamesToModify.length > 0) {                    return false;                }                // If room is public and user isn't banned then return true                if (doc.isPublic                    && doc.accessBanned.indexOf(userId) === -1                ) {                    return true;                }                // If user is in regular list and not banned then return true                if ((doc.accessRegular.indexOf(userId) !== -1)                    && (doc.accessBanned.indexOf(userId) === -1)) {                    return true;                }            }            // If previous checks fail then user is not permitted, return false            return false;        },        'remove':function(userId,doc){            return doc.adminId === userId;        }        // TODO Prevent users from generating their own _id        //'transform': {$set: {ownerId: this.userId} }    });    // TODO Prevent users from generating their own _id    // TODO Limit access to invites actually belonging to the user    ChatRoomsInvites.allow({        'insert': function(userId, doc) {            return true;        },        'update': function(userId, doc, fieldNames, modifier) {            return true;        },        'remove': function(userId, doc) {            return true;        },        // TODO Prevent users from generating their own _id        //'transform': {$set: {ownerId: this.userId} }    });});