// Holds list of users to invite to roomGameChatClientLists = {};Accounts.ui.config({   passwordSignupFields: 'USERNAME_AND_EMAIL'});Tracker.autorun(function () {    Meteor.subscribe("chatrooms");    Meteor.subscribe("onlusers");    Meteor.subscribe("chatroomsinvites");		Meteor.subscribe("allusers");});Template.mainNav.helpers({    'invitecount': function () {        var currentInvitesCount = GameChatClient.getChatRoomsInvitesCount();        if (currentInvitesCount > 0) {            return '(' + currentInvitesCount + ')';        } else {            return '';        }    }});

Template.dashboardpage.helpers({
	user: function(){
		return Meteor.users.find();
	 }
});Template.dashboardpage.helpers({	usercount: function(){		return Meteor.users.find().count();	}});Template.dashboardpage.helpers({	'click .deleteuser': function () {        meteor.users.remove({_id:this._id})     },});Template.roompage.helpers({    'chatrooms':function () {        return GameChatClient.getChatRooms();    }});Template.roompage.events({    'click .room': function () {        GameChatClient.setCurrentRoomId(this._id);        console.log("Current room is now " + GameChatClient.getCurrentRoomId());    }});Template.roomcreatepage.helpers({    'onlusr':function () {        return GameChatClient.getOnlineUsers();    }});Template.roomcreatepage.events({    'click .toggle-checked': function () {        if (GameChatClientLists.inviteList === undefined) {            console.log(".toggle-checked: inviteList is undefined, creating new list");            GameChatClientLists.inviteList = new Map();        }        // TODO Add different permission values (moderator, etc.)        // Add/remove user from invite list        if(!this.checked) {            console.log(".toggle-checked: Setting userId " + this._id);            GameChatClientLists.inviteList.set(this._id, "user");            console.log(".toggle-checked: userId "                + this._id                + " now has value "                + GameChatClientLists.inviteList.get(this._id)            );            this.checked = (!this.checked);        } else {            console.log(".toggle-checked: Deleting userId " + this._id);            GameChatClientLists.inviteList.delete(this._id);            this.checked = (!this.checked);        }    },    'click .createroom': function () {        // TODO get rid of this thing        if (GameChatClientLists.inviteList !== undefined) {            console.log(".createroom: GameChatClientLists.inviteList is defined and has size "                        + GameChatClientLists.inviteList.size);        }        function printInvites(value, key, map) {            console.log("userId " + key + " has access level " + value);        }        GameChatClientLists.inviteList.forEach(printInvites);        // Grab desired name for new room        var newRoomName = document.getElementById('newroomname');        // Grab invite message for new room        var newRoomMessage = document.getElementById('newroommessage')        // Create the chat room        console.log(".createroom: calling createChatRoom(), newRoomName=" + newRoomName.value);        GameChatClient.createChatRoom(            newRoomName.value,            GameChatClientLists.inviteList,            newRoomMessage.value        );        // Destroy inviteList (no longer needed)        GameChatClientLists.inviteList.clear();    }});/*Template.roomcreatepage.onRendered(function () {    // Create blank user invite list    inviteList = new Map();});*/Template.invitespage.helpers({    'chatroomsinvite': function () {        return GameChatClient.getChatRoomsInvites();    },});Template.invitespage.events({    'click .acceptinvite': function () {        GameChatClient.acceptInvite(this._id);    },    'click .declineinvite': function () {        GameChatClient.declineInvite(this._id);    },});Template.sidebar.helpers({    'onlusr':function () {        return GameChatClient.getOnlineUsers();    }});Template.sidebar.events({    'click .user':function(){        // TODO Remove (only used for debugging)        console.log('this._id before room existence check: ' + this._id);        console.log('userId: ' + Meteor.userId());        var res=ChatRooms.findOne({chatIds:{$all:[this._id,Meteor.userId()]}});        if(res) {            //already room exists            GameChatClient.setCurrentRoomId(res._id);        }        else {            //no room exists            var newRoom = ChatRooms.insert({chatIds:[this._id , Meteor.userId()],messages:[]});            // TODO Remove (only used for debugging)            console.log('this._id after room existence check (did not exist): ' + this._id);            GameChatClient.setCurrentRoomId(newRoom);        }    }});Template.messages.helpers({    'msgs':function() {        var result = ChatRooms.findOne({_id:GameChatClient.getCurrentRoomId()});        return result.messages;    }});Template.input.events = {    'keydown input#message' : function (event) {    if (event.which == 13) {        if (Meteor.user()) {            var message = document.getElementById('message');            if (message.value !== '') {                // Send the message                GameChatClient.sendChatMessage(GameChatClient.getCurrentRoomId(), message.value);                // Clear the contents of the message field                document.getElementById('message').value = '';                message.value = '';            }        }        else        {           alert("login to chat");        }    }  }}